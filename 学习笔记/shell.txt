脚本的最开始一行要指定命令解析器，如果没有指定的话，就使用默认的命令解析器 #！/bin/bash
shell语法：
	数据类型：字符串String（只有String类型，在shell中，声明变量不用指定类型，变量名和等号和值之间不能有空格，所有赋值都当作字符串看待）
	变量的定义：VAR=value
	变量的输入：read VAR
	变量的取值，在变量名前面加$表示取值
	变量类型：
		环境变量（环境变量的添加 export VAR=10，环境变量的删除unset VAR。搜索某个环境变量env | grep VAR）
		位置变量 （位置变量对应执行脚本时传入的参数，$0表示脚本名称，$1表示执行脚本时传入的第一个参数,以此类推.......，shift没执行一次，参数列表向左移一次）
		标准变量
			#	传递到脚本或函数的参数数量
			？ 	前一个命令的执行情况，0表示成功，其他值表示失败
			$	运行当前脚本的当前进程id好
			！	运行脚本的最后一个命令
			*	传递给脚本或函数的全部参数
			@	表示传递给脚本的全部参数
	
	
	变量的运算
		((表达式))			
	将执行命令后的值赋值给变量
		*VAR=$(date)
		*VAR=`date` 

	${VAR}	取变量值
	$VAR 	取变量值
	$(命令)	取命令执行后的结果
	`命令`	取命令执行后的结果

	VAR=15
	echo $(($VAR+5))		其中的$VAR+5算是一条命令

判别语句
	条件判别 （为真返回0，为假返回1）
		test 条件
		[空格 条件 空格]
		echo $? 	查看测试结果

	整数判别符 	（只能用于整数）
		-eq	等于
		-gt	大于
		-lt	小于
		-ge	大于等于
		-le	小于等于
		-ne	不等于

	文件种类判断
		[ -l fileName ]	判断文件是否为软连接
		[ -d fileName ]	判断文件是否为目录
		-c
		-f
		-b
		-p
		-s
	
	文件权限的判断
		[ -r fileName ] 若文件可读，则结果为真
		-w
		-x
		
	文件是否为空判断
		[ -s fileName ]	若fileName文件大小不为0，则结果为真
	
	判断文件是否存在
		[ -a fileName ]	若fileName文件存在，则结果为真
		
		
	字符串判断 （只能用于字符串）
		[ -z string ]	字符串为空则为真，返回0
		[ -n string ]	字符串不为空则为真，返回0
		[ string1 = strig2 ]	字符串相等则为真，返回0
		[ string1 != string2 ]	字符串不相等则为真，返回0
		
控制语句
	if语句
		if [ -d project ];then
			echo it is a dir
		elif [ -f project ];then
			echo it is a file
		else
			echo not found
		fi
		
		if []
		then
			.....
		elif []
		then
			.....
		else
			.....
		fi
		
		
		在if语句中
		then :				//:表示不做任何处理
		
	case分支语句
		case FILE_NAME in `ls`
		file_1|file_2)
			echo it is a file;;		//两个分号，表示语句的结束，相当于break ，防止case穿透
		dir_1|dir_2)
			echo it if a dir;;
		*)							//相当于C语言中的default语句
			echo not found;;
		esac						//case语句的结束
		
	for语句
		for VAR in `ls -l`;do
			echo ${VAR}
		done
		
		for VAR in 四川 重庆 北京
		do	
			echo $VAR
		done
	
	while语句
		read TEST
		while [ $TEST -lt 100 ];do
			echo ${TEST}
			TEST=$(($TEST+1))
			done
			
			
	select语句
		echo what do you want to study?
		select subject in java android c++
		do
			echo you have selected $subject .
			break
		done
		exit 0
		结果
		what do you want to study?
		1) androed
		2) java
		3) c++
		#? 2
		you have selected
			
	untill语句
		untill循环和while循环基本一样，不同的是，当untill循环的条件为假的时候，才能继续执行循环中的命令
		
		
	通配符
		*表示任意多个任意字符
		？表示任意一个字符
		[a-z]表示a-z里面的任意一个字符，[abcd]表示abcd里面的任意一个字符

	echo $[2#10+3]	2#10表示二进制的10 ，结果为5
	echo $[7#11_3]	7#11表示7进制的11	，结果为11


	转义字符\
		echo \$PATH  结果为$PATH	


	文件重定向
		 cmmd > file		把标准输出重定向到文件中
		 cmmd >> file		把标准输出追加到文件中
		 cmmd > file 2>&1	把标准出错重定向到1所指向的
		 cmmd >> file 2>&1
		 cmmd < file > file_2 (cat < file >file_2)
		 cmmd >&fd			把文件描述符fd作为标准输出
		 cmmd <&fd			把文件描述符fd作为标准输入
		 cmmd <&-			关闭标准输入




函数（shell中得函数没有参数列表，可以有返回值，也可以没有返回值return 加数字表示退出状态）
	函数格式
		func(){ echo ..... }
	函数调用
		func						//不需要传参数得函数得调用
		func 参数1 参数2....		//需要传入参数得函数调用
	函数参数的使用
		$0							//脚本名
		$1							//函数调用时传入的第一个参数
		$2 		....以此类推
		在全局调用时，$1表示脚本执行时传入的第一个参数。。。。以此类推
		
		
shell脚本调试
	sh -n 脚本名										//不执行脚本，仅检查脚本中的语法错误
	sh -v 脚本名										//在执行脚本的过程中，将执行过的脚本命令打印到屏幕
	sh -x 脚本名										//将用到的脚本内容打印到屏幕上
	
	只对脚本的某段内容进行跟踪调试
		set -x
		脚本内容
		set +x
		
		
		
正则表达式
		.					//匹配任意一个字符
		[]					//匹配[]中的任意一个字符
		-					//在[]内表示字符范围如a-Z
		^					//位于[]开头，表示匹配除[]中的字符之外的任意一个字符
		[[:xxxx]]			//grep工具预定义的一些命名字符类[[:alpha]]匹配一个字母，[[:digit]]匹配一个数字
	
	数量限定符
		?					//紧跟在它前面的单元应匹配零次或一次
		+					//紧跟在它前面的单元应匹配一次或多次
		*					//紧跟在它前面的单元应匹配零次或多次
		{N}					//紧跟在它前面的单元应匹配N次
		{N,}				//紧跟在它前面的单元应匹配至少N次
		{,N}				//紧跟在它前面的单元应匹配至多N次
		{N,M}				//紧跟在它前面的单元应匹配N至少N次，至多M次
	
	位置限定符
		^					//匹配行首的位置
		$					//匹配行末的位置
		\<					//匹配单词开头的位置
		\>					//匹配单词结尾的位置
		\b					//匹配单词开头或结尾的位置
		\B					//匹配非单词开头或结尾的位置
		
		
grep命令
	-a 或 --text : 不要忽略二进制的数据。
	-A<显示行数> 或 --after-context=<显示行数> : 除了显示符合范本样式的那一列之外，并显示该行之后的内容。
	-b 或 --byte-offset : 在显示符合样式的那一行之前，标示出该行第一个字符的编号。
	-B<显示行数> 或 --before-context=<显示行数> : 除了显示符合样式的那一行之外，并显示该行之前的内容。
	-c 或 --count : 计算符合样式的列数。
	-C<显示行数> 或 --context=<显示行数>或-<显示行数> : 除了显示符合样式的那一行之外，并显示该行之前后的内容。
	-d <动作> 或 --directories=<动作> : 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。
	-e<范本样式> 或 --regexp=<范本样式> : 指定字符串做为查找文件内容的样式。
	-E 或 --extended-regexp : 将样式为延伸的正则表达式来使用。
	-f<规则文件> 或 --file=<规则文件> : 指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式。
	-F 或 --fixed-regexp : 将样式视为固定字符串的列表。
	-G 或 --basic-regexp : 将样式视为普通的表示法来使用。
	-h 或 --no-filename : 在显示符合样式的那一行之前，不标示该行所属的文件名称。
	-H 或 --with-filename : 在显示符合样式的那一行之前，表示该行所属的文件名称。
	-i 或 --ignore-case : 忽略字符大小写的差别。
	-l 或 --file-with-matches : 列出文件内容符合指定的样式的文件名称。
	-L 或 --files-without-match : 列出文件内容不符合指定的样式的文件名称。
	-n 或 --line-number : 在显示符合样式的那一行之前，标示出该行的列数编号。
	-o 或 --only-matching : 只显示匹配PATTERN 部分。
	-q 或 --quiet或--silent : 不显示任何信息。
	-r 或 --recursive : 此参数的效果和指定"-d recurse"参数相同。
	-s 或 --no-messages : 不显示错误信息。
	-v 或 --revert-match : 显示不包含匹配文本的所有行。
	-V 或 --version : 显示版本信息。
	-w 或 --word-regexp : 只显示全字符合的列。
	-x --line-regexp : 只显示全列符合的列。
	-y : 此参数的效果和指定"-i"参数相同。
	
	
	
命令连接符
	;							//命令依次执行
	||							//连接符前面的命令执行失败才会执行连接符后面的命令
	&&							//连接符前面的命令执行成功才会执行后面的命令
	
	
find命令（find命令不可以和管道结合使用）
	find 目录 -name init				//搜索目录下的init文件
	find 目录 -size +2K -size -5k		//搜索目录下大于2K小于5K的文件，不加单位的话，单位默认为（512B -> 一个扇区）
	find 目录 -depth nu -type f -name “*in*” -size +2k			//搜索目录下大于2k的，文件名中含in的普通文件，最多搜索到第nu层
																//如果要在find命令的执行结果后面跟命令操作，就需要跟
																//-exec 命令 参数 {} \;  find的结果集都会传入{}里面让-exec对其执行操作
																//\和;都是必不可少的。

	find ...... -ok ls -lh {}  \;												//-ok可以替代-exec，不同的是在对find结果做
																//操作的时候会逐一进行询问
	find ...... | xargs ls -lh		//可以对find的结果做管道操作，当find出的结果太大的时候，xargs会对其做分批处理
						//但是xargs有一个弊端，它是以空格为结束标记的，因此，当文件名中有空格的时候就会执行出错
						//因此我们可以指定结束标记，比如当前目录下有个test test.c文件，我们可以用以下命令将其找出来
						//find . -type f -print0 | xargs -0 ls -l   		-print0是用于将每一条结果都用0作为结束标记
	
	-atime					//最后一次访问时间
	-ctime					//最后一次内容修改时间
	-mtime					//最后一次属性修改时间

	amin|cmin|mmin				//上面是以天为单位，这是以分钟为单位，例：find . -mtime +5 -exec ls -l {} \;	-5表示五天以内




																
sed工具






awk工具






C语言正则表达式（c语言中的正则表达式只有四个函数，基本可以完成所有的字符处理工作）
	regcomp()		//正则表达式编译，本质是转换成结构体
	regexec()		//正则表达式执行
	regfree()		//正则表达式释放
	regerror()		//
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
